const path = require("path");
const CircularDependencyPlugin = require("circular-dependency-plugin");

function makeSourceData(count) {
  const MIN_ID = 1;

  const dataList = [];
  dataList.push(["id", "count", "data"]);
  for (let index = MIN_ID; index < count; index++) {
    dataList.push([
      index,
      Math.floor(Math.random() * 80),
      Math.random().toString(36).substring(7),
    ]);
  }
  return {
    "book.list": dataList,
  };
}

function makeApiData(count) {
  const MIN_ID = 1;
  const dataList = [];
  for (let index = MIN_ID; index < count; index++) {
    const data = {
      id: index,
      count: Math.floor(Math.random() * 80),
      data: Math.random().toString(36).substring(7),
    };
    dataList.push(data);
  }
  return {
    sources: {
      "api.demo": {
        options: null,
        data: dataList,
      },
    },
  };
}
module.exports = {
  entry: {
    grid: {
      import: "./src/Loader.ts",
      filename: "basiscore.grid.js",
      library: {
        name: "[name]",
        type: "assign",
      },
    },
    gridComponent: {
      import: "./src/ComponentLoader.ts",
      filename: "basiscore.grid.component.js",
      library: {
        name: "bc",
        type: "assign",
      },
    },
  },
  devServer: {
    static: path.resolve(__dirname, "wwwroot"),
    onBeforeSetupMiddleware: function (server) {
      server.app.get("/api/demo", function (req, res) {
        res.send(makeApiData(300));
      });
      server.app.post("/source/demo", function (req, res) {
        res.json(makeSourceData(300));
      });
      server.app.post("*", (req, res) => {
        res.redirect(req.originalUrl);
      });
    },
    open: true,
    port: 3001,
  },
  module: {
    rules: [
      {
        test: /\.ts$/,
        use: ["ts-loader"],
      },
      {
        test: /\.css$/,
        use: ["style-loader", "css-loader"],
      },
      {
        test: /\.png/,
        type: "asset/resource",
      },
    ],
  },
  resolve: {
    extensions: [".ts", ".tsx", ".js", ".jsx", ".css", ".png"], // there's a dot missing
  },
  plugins: [
    new CircularDependencyPlugin({
      // `onStart` is called before the cycle detection starts
      onStart({ compilation }) {
        console.log("start detecting webpack modules cycles");
      },
      // `onDetected` is called for each module that is cyclical
      onDetected({ module: webpackModuleRecord, paths, compilation }) {
        // `paths` will be an Array of the relative module paths that make up the cycle
        // `module` will be the module record generated by webpack that caused the cycle
        compilation.errors.push(new Error(paths.join(" -> ")));
      },
      // `onEnd` is called before the cycle detection ends
      onEnd({ compilation }) {
        console.log("end detecting webpack modules cycles");
      },
    }),
  ],
};
